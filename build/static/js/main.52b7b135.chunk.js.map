{"version":3,"sources":["util/spotify.js","Components/SearchBar/searchbar.js","Components/Track/track.js","Components/TrackList/tracklist.js","Components/SearchResults/searchresults.js","Components/Playlist/playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","event","this","setState","target","value","onSearch","console","log","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetchSearchUrl","fetch","method","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","playlistName","TrackUris","userID","body","JSON","stringify","playlistID","uris","App","updatePlaylistName","find","savedTrack","push","filter","currentTrack","trackURIs","i","length","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52b7b135.chunk.js","sourcesContent":["// import React from 'react'; \n// import SearchBar from '../Components/SearchBar/searchbar';\n// import { findRenderedComponentWithType } from 'react-dom/test-utils';\n\nlet accessToken; // this will return truthy only after being defined \nconst clientID = \"bc63909ac1974f3b9b1c58ce4b6ce734\" // add my client ID here. Make sure to not put this on GH\nconst redirectURI = \"https://lucas-jamming.surge.sh/\"\n\nconst Spotify = {\n    getAccessToken(){\n        if(accessToken){\n            return accessToken;\n        }\n        \n        // stuff that will happen after the user is redirected\n        // this checks if we have a match on the URL for expiresIn & access token\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        // if we have both, this defines the access token. \n        if(accessTokenMatch && expiresInMatch){\n            accessToken = accessTokenMatch[1]; // why index of 1? Because we're dealing with a returned object with a specific format (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n            const expiresIn = Number(expiresInMatch[1]) // why index 1 again?\n\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\n            window.location = accessUrl;\n        }\n    },\n\n    async search(term){\n        let fetchSearchUrl = `https://api.spotify.com/v1/search?type=track&q=${term}&limit=30`\n        return await fetch(fetchSearchUrl, {\n            method: 'GET',\n            headers: {\n                Authorization: `Bearer ${accessToken}`},\n        }).then(response => {\n            return response.json(); // converts to json\n        }).then(  \n            jsonResponse => {\n                if(!jsonResponse.tracks){\n                    return [];\n                } \n                return jsonResponse.tracks.items.map(track => {\n                    return {\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album:track.album.name,\n                        uri: track.uri\n                    }  \n                })\n            }\n        );   \n    }, \n\n    async savePlaylist(playlistName, TrackUris){ // writes the learner's custom playlist into their Spotify account \n          if (!playlistName && !TrackUris){\n            return;\n          }  \n\n          let accesstoken = window.location.href.match(/access_token=([^&]*)/); // this fetches the current accesstoken from the user \n          let headers = {Authorization: `Bearer ${accessToken}`}\n        //   let userID;\n    \n        // Request 1: GET current user's ID \n          const userID = await fetch('https://api.spotify.com/v1/me', {headers: headers})\n          .then(response => {return response.json()})\n          .then(jsonResponse => {return jsonResponse.id})\n\n          console.log('userID is', userID);\n          console.log('accessToken is ', accessToken)\n            \n        // Request 2: POST a new plylist with the input name to the current user's Spotify account\n            // Get the playlist ID back from the request\n          const playlistID = await fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n            method: 'POST',  \n            headers: {\n                Authorization: `Bearer ${accessToken}`,\n                'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                \"name\": playlistName // supposed to be playlistName\n            })})\n          .then(response => {\n              return response.json()})\n          .then(jsonResponse => {\n              console.log(jsonResponse);\n              return jsonResponse.id})\n\n            console.log('playlistID is ', playlistID);\n\n            // Request 3: POST the track URIs to the newly-created playlist - referencing the current user's account & playlist. \n          await fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\n            method: 'POST', \n            headers: {\n                Authorization: `Bearer ${accessToken}`,\n                'Content-Type': 'application/json' \n            }, \n            body: JSON.stringify({\n                uris: TrackUris\n            })})\n            .then(response => {return response.json()})\n            .then(jsonResponse => {\n                console.log(jsonResponse);\n                return jsonResponse;\n            })\n    }\n} \n\nexport default Spotify;\n\n","import React from 'react'; \nimport './searchbar.css';\n\nclass SearchBar extends React.Component {    \n    constructor(props){\n        super(props);\n        this.state = {\n            term: \" \"\n        };\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n    \n    handleTermChange(event){\n        this.setState({term: event.target.value});\n        //console.log(this.state.term); // I wonder why does it have to be this way - why can't I just attach the value of the element directly into the response?\n    }\n\n    search(){\n        this.props.onSearch(this.state.term);\n        console.log(\"searching for\", this.state.term);\n    }\n    \n    render(){\n        return (\n            <div className='SearchBar'> \n                <input placeholder=\"Enter a Song, Album, or Artist\" onChange={this.handleTermChange} />\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './track.css';\n\nclass Track extends React.Component{\n    constructor(props){\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this); \n    }\n    \n    renderAction(){\n        if(this.props.isRemoval){\n            return (<button className=\"Track-action\" onClick={this.removeTrack}>-</button>);\n        } else {\n            return (<button className=\"Track-action\" onClick={this.addTrack}>+</button>);\n        }     \n    }\n\n    addTrack(){\n        this.props.onAdd(this.props.track);\n        console.log(\"adding track\")\n    }\n\n    removeTrack(){\n        this.props.onRemove(this.props.track);\n        console.log(\"removing track\")\n    }\n\n    \n    render(){\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n            {this.renderAction()}\n            </div>\n        )\n    }\n }\n\n\nexport default Track;","import React from 'react'; \nimport './tracklist.css';\nimport Track from '../Track/track.js';\n\nclass TrackList extends React.Component {\n    render(){\n        return (\n            <div className=\"TrackList\" >\n               {     \n                this.props.tracks.map(track => {\n                    return <Track \n                        track={track} \n                        key={track.id} \n                        onAdd={this.props.onAdd}\n                        onRemove={this.props.onRemove}\n                        isRemoval={this.props.isRemoval} />\n                })\n               }\n            </div>\n        )\n    }\n}\n\nexport default TrackList; ","import React from 'react';\nimport './searchresults.css';\nimport TrackList from '../TrackList/tracklist';\n\nclass SearchResults extends React.Component{\n    render (){\n        return (\n            <div className=\"SearchResults\" >\n                <h2>Results</h2>\n                <TrackList \n                    tracks={this.props.searchResults}\n                    onAdd={this.props.onAdd}\n                    isRemoval={false} />\n            </div>\n        );\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './playlist.css';\nimport TrackList from '/Users/lucas/Desktop/Projects/jamming/src/Components/TrackList/tracklist.js'\n\nclass Playlist extends React.Component{\n   constructor(props){\n       super(props);\n       this.handleNameChange = this.handleNameChange.bind(this);\n   } \n    \n    \n    handleNameChange(event){\n        this.props.onNameChange(event.target.value);\n    }\n    \n    render(){\n        return (\n            <div className=\"Playlist\">\n                <input defaultValue=\"New Playlist\" onChange={this.handleNameChange}/>\n                <TrackList \n                    tracks={this.props.playlistTracks}\n                    isRemoval={true}\n                    onRemove={this.props.onRemove}\n                    />\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\n\nexport default Playlist; ","import React from 'react';\nimport './App.css';\nimport SearchBar from \"/Users/lucas/Desktop/Projects/jamming/src/Components/SearchBar/searchbar.js\";\nimport SearchResults from \"/Users/lucas/Desktop/Projects/jamming/src/Components/SearchResults/searchresults.js\";\nimport Playlist from \"/Users/lucas/Desktop/Projects/jamming/src/Components/Playlist/playlist.js\";\nimport Spotify from '../../util/spotify';\nimport Test from '../../util/test.js';\n// import TrackList from '../TrackList/tracklist';\n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults: [\n      // {\n      //     name: \"Don't go breaking my heart\",\n      //     artist: \"ABBA\",\n      //     album: \"ABBA Forever\",\n      //     id: \"0001\"\n      //   }, {\n      //     name: \"Thriller\",\n      //     artist: \"Michael Jackson\",\n      //     album: \"Thriller\",\n      //     id: \"0002\"\n      //   }, {\n      //     name: \"Vertigo\",\n      //     artist: \"U2\",\n      //     album: \"The Bad One\",\n      //   id: \"0003\"\n      // }\n    ],\n  \n      playlistName: \"New Playlist\",\n      playlistTracks: [\n        // {\n        //   name: \"Nude\",\n        //   artist: \"Radiohead\",\n        //   album: \"In Rainbows\",\n        //   id: \"0004\"\n        // }, {\n        //   name: \"Jigsaw Falling Into Pieces\",\n        //   artist: \"Radiohead\",\n        //   album: \"In Rainbows\",\n        //   id: \"0005\"   \n        // }, {\n        //   name: \"All I Need\",\n        //   artist: \"Radiohead\",\n        //   album: \"In Rainbows\",\n        //   id: \"0006\"\n        // }\n      ]} // end of this.state\n\n      this.addTrack = this.addTrack.bind(this);\n      this.removeTrack = this.removeTrack.bind(this); \n      this.updatePlaylistName = this.updatePlaylistName.bind(this);\n      this.savePlaylist = this.savePlaylist.bind(this);\n      this.search = this.search.bind(this);\n\n    };\n    \n  addTrack(track) {\n    let tracks = this.state.playlistTracks; // array of objects in state\n\n    if (tracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n      }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n  \n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({playlistTracks: tracks});\n    }\n\n  \n  updatePlaylistName(name){\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist(){\n    let trackURIs = [];\n    for (let i = 0; i <= this.state.playlistTracks.length - 1; i++){\n      trackURIs.push(this.state.playlistTracks[i].uri)\n    }\n    \n    Spotify.savePlaylist(this.state.playlistName, trackURIs)\n    this.setState({\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    });\n    this.updatePlaylistName('New Playlist');\n  }\n\n  search(term){\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    });\n  }\n\n  render() {\n    Spotify.getAccessToken();\n    return (\n      <div>\n        \n        <h1>Ja<span className=\"highlight\">mmm</span>ing </h1>\n        \n        {/* <button onClick={Spotify.savePlaylist}>test</button> */}\n        \n        \n        <div className='App'>\n          <SearchBar \n              onSearch={this.search}/>\n          \n          <div className='App-playlist'>\n            <SearchResults \n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}  />\n            <Playlist \n              playlistName={this.state.playlistName} \n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave = {this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  } \n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '/Users/lucas/Desktop/Projects/jamming/src/Components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}